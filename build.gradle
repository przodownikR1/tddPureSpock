buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        maven { url "https://plugins.gradle.org/m2/"}
    }
    dependencies {
        classpath"org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarqubeGradleVersion}"
    }
}
plugins {
    id 'info.solidsoft.pitest' version '1.3.0'
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'io.spring.dependency-management'
apply from: 'gradle/test.gradle'
apply from: 'gradle/integrationTest.gradle'
apply from: 'gradle/spock.gradle'
apply from: 'gradle/sonar.gradle'
apply plugin: 'jacoco'
repositories { 
    mavenCentral()
    mavenLocal() 
 }

ext {  springCloudVersion = 'Finchley.RELEASE' }

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.4.15" //::indy
    compile "com.google.guava:guava:${guavaVersion}"
    compile "io.vavr:vavr:${vavrVersion}"
    compile "io.vavr:vavr-match:${vavrVersion}"

    //compileOnly "org.springframework.boot:spring-boot-configuration-processor"
    compile 'org.projectlombok:lombok:1.18.0'

    // LOGSTASH
    compile "ch.qos.logback:logback-core:${logbackCoreVersion}"
    compile "ch.qos.logback:logback-access:${logbackCoreVersion}"
    compile "ch.qos.logback:logback-classic:${logbackCoreVersion}"
    compile "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoder}"
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.6")
    //SPOCK TESTING
    testCompile ("org.spockframework:spock-core:${spockCoreVersion}")
    {
        exclude module: 'groovy-all'
    }
    testCompile ("org.spockframework:spock-spring:${spockSpringVersion}")
    {
        exclude module: 'groovy-all'
    }
    testCompile( "com.athaydes:spock-reports:${spockReportsVersion}" ) {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }
    testCompile "net.bytebuddy:byte-buddy:${byteBuddyVersion}"
    testCompile "org.objenesis:objenesis:${objenesisVersion}"
    testCompile "org.mutabilitydetector:MutabilityDetector:${mutabilityDetectorVersion}"
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.2.2'
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.cloud:spring-cloud-stream-test-support"
    testCompile "org.springframework.kafka:spring-kafka-test:${springkafkaTestVersion}"
    testCompile "io.vavr:vavr-test:${vavrVersion}"
}

configurations.all {
    all*.exclude group: 'commons-logging', module: 'commons-logging' // replaced with jcl-over-slf4j
    all*.exclude group: 'org.mockito', module: 'mockito'
    exclude group: "commons-logging", module: "commons-logging"
    exclude group: "log4j", module: "log4j"
    exclude group: "org.slf4j", module: "slf4j-log4j12"
    exclude group: "org.slf4j", module: "slf4j-jcl"
    exclude group: "org.slf4j", module: "slf4j-jdk14"
    exclude group: 'assertj-core'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
     }

/*tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
}*/

[compileJava, compileTestGroovy, compileTestJava]*.options*.encoding = "UTF-8"
[compileJava, compileTestGroovy, compileTestJava]*.options*.compilerArgs = ["-Xlint:all,-options,-processing,-path"]

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = false
        csv.enabled = false
        html.destination file("${buildDir}/jacocoReportHtml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}
test.finalizedBy jacocoTestReport


pitest {
    targetClasses = ['pl.java.scalatech.json*']  //by default "${project.group}.*"
    pitestVersion = '1.1.0' //not needed when a default PIT version should be used
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}

tasks.withType(JavaCompile) { 
    options.fork = true 
    options.encoding = 'UTF-8'
}

task wrapper(type: Wrapper) {}
